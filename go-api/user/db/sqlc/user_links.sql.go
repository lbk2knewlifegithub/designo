// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user_links.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserLinks = `-- name: CreateUserLinks :exec
INSERT INTO
    public.user_links (
        oauth,
        twitter,
        dev_to,
        hashnode,
        codepen,
        twitch,
        stack_over_flow,
        gitlab,
        free_code_camp,
        medium,
        youtube,
        codewars,
        linked_in,
        user_id
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
`

type CreateUserLinksParams struct {
	Github        sql.NullString `json:"oauth"`
	Twitter       sql.NullString `json:"twitter"`
	DevTo         sql.NullString `json:"devTo"`
	Hashnode      sql.NullString `json:"hashnode"`
	Codepen       sql.NullString `json:"codepen"`
	Twitch        sql.NullString `json:"twitch"`
	StackOverFlow sql.NullString `json:"stackOverFlow"`
	Gitlab        sql.NullString `json:"gitlab"`
	FreeCodeCamp  sql.NullString `json:"freeCodeCamp"`
	Medium        sql.NullString `json:"medium"`
	Youtube       sql.NullString `json:"youtube"`
	Codewars      sql.NullString `json:"codewars"`
	LinkedIn      sql.NullString `json:"linkedIn"`
	UserID        uuid.UUID      `json:"userID"`
}

func (q *Queries) CreateUserLinks(ctx context.Context, arg CreateUserLinksParams) error {
	_, err := q.db.ExecContext(ctx, createUserLinks,
		arg.Github,
		arg.Twitter,
		arg.DevTo,
		arg.Hashnode,
		arg.Codepen,
		arg.Twitch,
		arg.StackOverFlow,
		arg.Gitlab,
		arg.FreeCodeCamp,
		arg.Medium,
		arg.Youtube,
		arg.Codewars,
		arg.LinkedIn,
		arg.UserID,
	)
	return err
}

const deleteUserLinks = `-- name: DeleteUserLinks :exec
DELETE FROM public.user_links WHERE user_id = $1
`

func (q *Queries) DeleteUserLinks(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserLinks, userID)
	return err
}

const updateUserLinks = `-- name: UpdateUserLinks :exec
UPDATE public.user_links
SET
    oauth = $1,
    twitter = $2,
    dev_to = $3,
    hashnode = $4,
    codepen = $5,
    twitch = $6,
    stack_over_flow = $7,
    gitlab = $8,
    free_code_camp = $9,
    medium = $10,
    youtube = $11,
    codewars = $12,
    linked_in = $13
WHERE user_id = $14
`

type UpdateUserLinksParams struct {
	Github        sql.NullString `json:"oauth"`
	Twitter       sql.NullString `json:"twitter"`
	DevTo         sql.NullString `json:"devTo"`
	Hashnode      sql.NullString `json:"hashnode"`
	Codepen       sql.NullString `json:"codepen"`
	Twitch        sql.NullString `json:"twitch"`
	StackOverFlow sql.NullString `json:"stackOverFlow"`
	Gitlab        sql.NullString `json:"gitlab"`
	FreeCodeCamp  sql.NullString `json:"freeCodeCamp"`
	Medium        sql.NullString `json:"medium"`
	Youtube       sql.NullString `json:"youtube"`
	Codewars      sql.NullString `json:"codewars"`
	LinkedIn      sql.NullString `json:"linkedIn"`
	UserID        uuid.UUID      `json:"userID"`
}

func (q *Queries) UpdateUserLinks(ctx context.Context, arg UpdateUserLinksParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLinks,
		arg.Github,
		arg.Twitter,
		arg.DevTo,
		arg.Hashnode,
		arg.Codepen,
		arg.Twitch,
		arg.StackOverFlow,
		arg.Gitlab,
		arg.FreeCodeCamp,
		arg.Medium,
		arg.Youtube,
		arg.Codewars,
		arg.LinkedIn,
		arg.UserID,
	)
	return err
}
