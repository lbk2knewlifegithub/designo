// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: bio.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserBio = `-- name: CreateUserBio :exec
INSERT INTO
    public.bio (website, content, current_learning, user_id)
VALUES($1, $2, $3, $4)
`

type CreateUserBioParams struct {
	Website         sql.NullString `json:"website"`
	Content         sql.NullString `json:"content"`
	CurrentLearning sql.NullString `json:"currentLearning"`
	UserID          uuid.UUID      `json:"userID"`
}

func (q *Queries) CreateUserBio(ctx context.Context, arg CreateUserBioParams) error {
	_, err := q.db.ExecContext(ctx, createUserBio,
		arg.Website,
		arg.Content,
		arg.CurrentLearning,
		arg.UserID,
	)
	return err
}

const deleteUserBio = `-- name: DeleteUserBio :exec
DELETE
FROM public.bio
WHERE user_id = $1
`

func (q *Queries) DeleteUserBio(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserBio, userID)
	return err
}

const updateUserBio = `-- name: UpdateUserBio :exec
UPDATE public.bio
SET website = $1, current_learning = $2, content = $3
WHERE user_id = $4
`

type UpdateUserBioParams struct {
	Website         sql.NullString `json:"website"`
	CurrentLearning sql.NullString `json:"currentLearning"`
	Content         sql.NullString `json:"content"`
	UserID          uuid.UUID      `json:"userID"`
}

func (q *Queries) UpdateUserBio(ctx context.Context, arg UpdateUserBioParams) error {
	_, err := q.db.ExecContext(ctx, updateUserBio,
		arg.Website,
		arg.CurrentLearning,
		arg.Content,
		arg.UserID,
	)
	return err
}
