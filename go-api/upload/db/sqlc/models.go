// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

type A11y struct {
	ReportID uuid.UUID      `json:"reportID"`
	Level    string         `json:"level"`
	Title    string         `json:"title"`
	Context  string         `json:"context"`
	Help     sql.NullString `json:"help"`
}

type Bio struct {
	UserID          uuid.UUID      `json:"userID"`
	Website         sql.NullString `json:"website"`
	CurrentLearning sql.NullString `json:"currentLearning"`
	Content         sql.NullString `json:"content"`
}

type Bookmark struct {
	UserID     uuid.UUID `json:"userID"`
	SolutionID uuid.UUID `json:"solutionID"`
}

type Challenge struct {
	ChallengeID uuid.UUID       `json:"challengeID"`
	Steps       string          `json:"steps"`
	Ideas       string          `json:"ideas"`
	Type        string          `json:"type"`
	Title       string          `json:"title"`
	Languages   json.RawMessage `json:"languages"`
	Description string          `json:"description"`
	StarterUrl  string          `json:"starterUrl"`
	Brief       string          `json:"brief"`
	HeroImage   string          `json:"heroImage"`
	Difficulty  string          `json:"difficulty"`
	CreatedAt   time.Time       `json:"createdAt"`
	UpdatedAt   time.Time       `json:"updatedAt"`
}

type ChallengeImage struct {
	ImageID     uuid.UUID `json:"imageID"`
	ChallengeID uuid.UUID `json:"challengeID"`
	Title       string    `json:"title"`
	Preview     string    `json:"preview"`
	Design      string    `json:"design"`
}

type Comment struct {
	CommentID  uuid.UUID     `json:"commentID"`
	UserID     uuid.UUID     `json:"userID"`
	SolutionID uuid.UUID     `json:"solutionID"`
	ParentID   uuid.NullUUID `json:"parentID"`
	Content    string        `json:"content"`
	ReplyTo    string        `json:"replyTo"`
	CreatedAt  time.Time     `json:"createdAt"`
	UpdatedAt  time.Time     `json:"updatedAt"`
}

type Difficulty struct {
	Name   string `json:"name"`
	Points int32  `json:"points"`
}

type EmailSetting struct {
	UserID            uuid.UUID `json:"userID"`
	CommentOnSolution bool      `json:"commentOnSolution"`
	ReplyOnComment    bool      `json:"replyOnComment"`
	MentionInComment  bool      `json:"mentionInComment"`
	EarnAnArchivement bool      `json:"earnAnArchivement"`
}

type HtmlValidator struct {
	ReportID uuid.UUID      `json:"reportID"`
	Level    string         `json:"level"`
	Title    string         `json:"title"`
	Context  string         `json:"context"`
	Help     sql.NullString `json:"help"`
}

type Like struct {
	UserID     uuid.UUID `json:"userID"`
	SolutionID uuid.UUID `json:"solutionID"`
}

type Report struct {
	ReportID   uuid.UUID `json:"reportID"`
	SolutionID uuid.UUID `json:"solutionID"`
	CreatedAt  time.Time `json:"createdAt"`
}

type Solution struct {
	SolutionID  uuid.UUID      `json:"solutionID"`
	UserID      uuid.UUID      `json:"userID"`
	ChallengeID uuid.UUID      `json:"challengeID"`
	Title       string         `json:"title"`
	RepoUrl     string         `json:"repoUrl"`
	LiveSiteUrl string         `json:"liveSiteUrl"`
	Screenshot  sql.NullString `json:"screenshot"`
	Questions   string         `json:"questions"`
	IsPrivate   bool           `json:"isPrivate"`
	CreatedAt   time.Time      `json:"createdAt"`
	UpdatedAt   time.Time      `json:"updatedAt"`
}

type Tag struct {
	TagID uuid.UUID `json:"tagID"`
	Name  string    `json:"name"`
}

type TagsSolution struct {
	TagID      uuid.UUID `json:"tagID"`
	SolutionID uuid.UUID `json:"solutionID"`
}

type TagsUser struct {
	TagID  uuid.UUID `json:"tagID"`
	UserID uuid.UUID `json:"userID"`
}

type User struct {
	UserID       uuid.UUID      `json:"userID"`
	Name         string         `json:"name"`
	Username     string         `json:"username"`
	Avatar       sql.NullString `json:"avatar"`
	AvatarGithub string         `json:"avatarGithub"`
	IsPremium    bool           `json:"isPremium"`
	IsHireMe     bool           `json:"isHireMe"`
	Blocked      bool           `json:"blocked"`
	Email        string         `json:"email"`
	Admin        bool           `json:"admin"`
	Location     string         `json:"location"`
	CreatedAt    time.Time      `json:"createdAt"`
	UpdatedAt    time.Time      `json:"updatedAt"`
}

type UserLink struct {
	UserID        uuid.UUID      `json:"userID"`
	Twitter       sql.NullString `json:"twitter"`
	DevTo         sql.NullString `json:"devTo"`
	Hashnode      sql.NullString `json:"hashnode"`
	Twitch        sql.NullString `json:"twitch"`
	StackOverFlow sql.NullString `json:"stackOverFlow"`
	Gitlab        sql.NullString `json:"gitlab"`
	FreeCodeCamp  sql.NullString `json:"freeCodeCamp"`
	Medium        sql.NullString `json:"medium"`
	Youtube       sql.NullString `json:"youtube"`
	Codewars      sql.NullString `json:"codewars"`
	LinkedIn      sql.NullString `json:"linkedIn"`
	Github        sql.NullString `json:"oauth"`
	Codepen       sql.NullString `json:"codepen"`
}

type UsersChallenge struct {
	UserID      uuid.UUID `json:"userID"`
	ChallengeID uuid.UUID `json:"challengeID"`
	Completed   bool      `json:"completed"`
}
