// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: solution.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getSolutionScreenshot = `-- name: GetSolutionScreenshot :one
SELECT s.screenshot 
FROM public.solutions s 
WHERE s.user_id = $1 AND s.solution_id = $2
`

type GetSolutionScreenshotParams struct {
	UserID     uuid.UUID `json:"userID"`
	SolutionID uuid.UUID `json:"solutionID"`
}

func (q *Queries) GetSolutionScreenshot(ctx context.Context, arg GetSolutionScreenshotParams) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getSolutionScreenshot, arg.UserID, arg.SolutionID)
	var screenshot sql.NullString
	err := row.Scan(&screenshot)
	return screenshot, err
}

const updateSolutionScreenshot = `-- name: UpdateSolutionScreenshot :exec
UPDATE public.solutions s 
SET screenshot = $1 
WHERE s.user_id = $2 AND s.solution_id = $3
`

type UpdateSolutionScreenshotParams struct {
	Screenshot sql.NullString `json:"screenshot"`
	UserID     uuid.UUID      `json:"userID"`
	SolutionID uuid.UUID      `json:"solutionID"`
}

func (q *Queries) UpdateSolutionScreenshot(ctx context.Context, arg UpdateSolutionScreenshotParams) error {
	_, err := q.db.ExecContext(ctx, updateSolutionScreenshot, arg.Screenshot, arg.UserID, arg.SolutionID)
	return err
}
